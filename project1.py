# -*- coding: utf-8 -*-
"""project1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oeKZdplAxnj8og3vMtab9Q_5Fh7eNPog
"""

import os
import shutil
import re
import argparse

class FileManager:
    def __init__(self, directory):
        self.directory = directory

    def search_files(self, pattern):
        """Search for files matching the pattern in the directory."""
        matches = []
        for root, _, files in os.walk(self.directory):
            for file in files:
                if re.search(pattern, file):
                    matches.append(os.path.join(root, file))
        return matches

    def rename_files(self, original_name, new_name):
        """Rename files from original_name to new_name in the directory."""
        for root, _, files in os.walk(self.directory):
            for file in files:
                if file == original_name:
                    old_path = os.path.join(root, file)
                    new_path = os.path.join(root, new_name)
                    os.rename(old_path, new_path)
                    print(f"Renamed: {old_path} -> {new_path}")

    def modify_file_content(self, file_name, content):
        """Modify the content of the specified file."""
        for root, _, files in os.walk(self.directory):
            for file in files:
                if file == file_name:
                    file_path = os.path.join(root, file)
                    with open(file_path, 'w') as f:
                        f.write(content)
                    print(f"Modified content of: {file_path}")

    def copy_files(self, file_names, target_directory):
        """Copy files to the target directory."""
        for file_name in file_names:
            for root, _, files in os.walk(self.directory):
                if file_name in files:
                    file_path = os.path.join(root, file_name)
                    shutil.copy(file_path, target_directory)
                    print(f"Copied: {file_path} -> {target_directory}")

    def move_files(self, file_names, target_directory):
        """Move files to the target directory."""
        for file_name in file_names:
            for root, _, files in os.walk(self.directory):
                if file_name in files:
                    file_path = os.path.join(root, file_name)
                    shutil.move(file_path, target_directory)
                    print(f"Moved: {file_path} -> {target_directory}")

def main():
    parser = argparse.ArgumentParser(description='File Management Tool')
    parser.add_argument('directory', type=str, help='Directory to manage files')
    subparsers = parser.add_subparsers(dest='command')

    search_parser = subparsers.add_parser('search', help='Search files by pattern')
    search_parser.add_argument('pattern', type=str, help='Pattern to search for')

    rename_parser = subparsers.add_parser('rename', help='Rename a file')
    rename_parser.add_argument('original_name', type=str, help='Original file name')
    rename_parser.add_argument('new_name', type=str, help='New file name')

    modify_parser = subparsers.add_parser('modify', help='Modify file content')
    modify_parser.add_argument('file_name', type=str, help='File name to modify')
    modify_parser.add_argument('content', type=str, help='New content for the file')

    copy_parser = subparsers.add_parser('copy', help='Copy files to target directory')
    copy_parser.add_argument('file_names', nargs='+', type=str, help='List of file names to copy')
    copy_parser.add_argument('target_directory', type=str, help='Target directory for copying files')

    move_parser = subparsers.add_parser('move', help='Move files to target directory')
    move_parser.add_argument('file_names', nargs='+', type=str, help='List of file names to move')
    move_parser.add_argument('target_directory', type=str, help='Target directory for moving files')

    args = parser.parse_args()

    file_manager = FileManager(args.directory)

    if args.command == 'search':
        matches = file_manager.search_files(args.pattern)
        for match in matches:
            print(f"Found: {match}")

    elif args.command == 'rename':
        file_manager.rename_files(args.original_name, args.new_name)

    elif args.command == 'modify':
        file_manager.modify_file_content(args.file_name, args.content)

    elif args.command == 'copy':
        file_manager.copy_files(args.file_names, args.target_directory)

    elif args.command == 'move':
        file_manager.move_files(args.file_names, args.target_directory)

if __name__ == '__main__':
    main()

